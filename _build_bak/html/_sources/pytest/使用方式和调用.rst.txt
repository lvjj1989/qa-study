使用方式和调用
============================================

你可以通过以下方法进行调用
::

        python -m pytest [...]
        或者
        py.test [...]

获取版本，选项名，环境变量
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* py.test --version 看版本
* py.test --fixtures 查看内置参数
* py.test -h | --help 命令行和配置文件帮助


失败后停止
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* py.test -x #首次失败后停止执行
* py.test --maxfail=2 #两次失败之后停止执行

执行选择用例
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* py.test test_mod.py，执行模块中的用例
* py.test test_mod.py::TestClass，执行模块中的用例中个类
* py.test test_mod.py::TestClass::test_case_def，执行模块中的用例中个类中的摸个测试用例函数
* py.test somepath，执行路径中用例
* py.test -k stringexpr，执行字符串表达式中的用例，比如"MyClass? and not method"，选择TestMyClass.test_something，排除了TestMyClass.test_method_simple。
* py.test --pyargs pkg，导入pkg，使用其文件系统位置来查找和执行用例。执行pypkg目录下的所有用例。

调试输出
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* py.test --showlocals 在traceback中显示本地变量
* py.test -l 在traceback中显示本地变量（快捷方式）
* py.test --tb=long 默认的traceback信息格式化形式
* py.test --tb=native 标准库格式化形式
* py.test --tb=short 更短的格式
* py.test --tb=line 每个错误一行


失败时调用PDB (Python Debugger)：
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Python带有一个内置的Python调试器称为PDB。pytest可以在命令行选项指定调用：

::

        py.test -x --pdb # 失败时调用pdb，然后退出测试
        py.test --pdb - maxfail=3＃ 前3次失败调用pdb。


Profiling测试执行时间
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
得到最执行慢的10个测试
::

        py.test --durations=10 


创建JUnitXML格式的文件
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
创建Jenkins或其他持续集成服务器的结果文件：

::

        py.test --junitxml=path #path是一个xml文件

在3.1版本中：你可以通过配置junit_suite_name，设置测试集的xml项目根目录名称，

::

        [pytest]
        junit_suite_name = my_suite



